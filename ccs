#!/usr/bin/env python
#
# Chess Championship Scores
#
# Parse the table generated on chess.com and recreate the scores
# Go to http://www.chess.com/tournament/YOUR-TOURNAMENT-HERE and save the
# generated page - pass this file as argv[1]
#

from __future__ import print_function

import argparse
import math
import re
from bs4 import BeautifulSoup
from bs4 import NavigableString
from operator import attrgetter

parser = argparse.ArgumentParser(
        description='Generate scores for a chess.com championship')
parser.add_argument('html_file', nargs=1, type=str,
                    help='html file with current state')
args = parser.parse_args()

class Colors:
    def __init__(self):
        self.enable()
    def enable(self):
        self.RED = '\033[31m'
        self.GREEN = '\033[32m'
        self.YELLOW = '\033[33m'
        self.CLEAR = '\033[0m'
    def disable(self):
        self.GREEN = ''
        self.RED = ''
        self.YELLOW = ''
        self.CLEAR = ''
    def is_enabled(self):
        return self.CLEAR != ''
    def get_color_for_result(self, result):
        if result == 0:
            return self.RED
        elif result == 1:
            return self.GREEN
        elif result == 0.5:
            return self.YELLOW
        else:
            return self.GREEN

class Player:
    def __init__(self, name):
        self.name = name
        self.score = 0
        self.tie = 0
        self.games = dict()

class Games:
    def __init__(self):
        self.results = tuple()
        self.simulated = tuple()
    def __len__(self):
        return len(self.results)
    def append(self, r, simulated):
        self.results += (r,)
        self.simulated += (simulated,)
    def pop(self):
        self.results = self.results[:-1]
        self.simulatated =  self.simulated[:-1]

def get_name(col):
    return col.find_all('a')[1].text.strip()

def get_games(col):
    games = Games()
    for a in col.find_all('a'):
        s = a.text.strip()
        #  '_' is on going, 'X' the game doesn't exist
        if s == '_' or s == 'X':
            continue

        games.append(float(s), False)

    return games

f = open(args.html_file[0])
soup = BeautifulSoup(f)

table = soup.find('table', 'pairings')
thead = table.thead

nplayers = 0
for c in thead.tr.contents:
    if isinstance(c, NavigableString):
        continue
    nplayers += 1
nplayers -= 3 # first column, score, tie break


players = []
# Create all players
for row in thead.next_siblings:
    if isinstance(row, NavigableString):
        continue
    for col in row.children:
        if isinstance(col, NavigableString):
            continue

        players.append(Player(get_name(col)))
        break

i = 0
for row in thead.next_siblings:
    if isinstance(row, NavigableString):
        continue

    x = players[i]
    j = -1
    for col in row.children:
        if isinstance(col, NavigableString):
            continue

        # ignore remaining cols, all is set
        if j >= nplayers:
            break;

        # ignore first column (it's player's name) and player vs player
        if j == -1 or j == i:
            j += 1
            continue

        y = players[j]
        x.games[y] = get_games(col)
        j += 1

    i += 1

def calculate_scores(players):
    scores = []
    for p in players:
        s = sum(sum(g.results) for g in p.games.values())
        scores.append(s)

    return scores

def calculate_tie_breaks(players, scores):
    ties = []
    i = 0
    for p in players:
        s = 0
        for y in p.games.keys():
            j = players.index(y)
            s += sum(r * scores[j] for r in p.games[y].results)
        ties.append(s)

    return ties

def update_players(players):
    nplayers = len(players)
    scores = calculate_scores(players)
    ties = calculate_tie_breaks(players, scores)

    for i in range(0, nplayers):
        players[i].score = scores[i]
        players[i].tie = ties[i]

    players.sort(key=attrgetter('score', 'tie', 'name'), reverse=True)

def pretty_print_games(players, colors):
    nplayers = len(players)

    # header
    print('%-18s' % '', end='')
    for i in range(1, nplayers + 1):
        print('{0:^8s}'.format(str(i) + '.'), end='')

    print('| %6s |%10s' % ('Score', 'Tie Break'))
    #             players     +  1st column  + score  + ties  + sep
    print('-' * (nplayers * 8 +  18          + 6      + 10    + 5))

    len_players_col=int(math.floor(math.log10(len(players))) + 1)
    # table
    i = 0
    for p in players:
        #print name
        n=str(i + 1).rjust(len_players_col)
        print("%s. %-15s" % (n, p.name), end='')

        for j in range(0, nplayers):
            if j == i:
                print('{0:^8s}'.format('X'), end='')
                continue

            game_results = []
            game_results_color = []
            if p.games.get(players[j]) is not None:
                for r, s in zip(p.games.get(players[j]).results, p.games.get(players[j]).simulated):
                    game_results.append('%.1g' % r)
                    if s and colors.is_enabled():
                        game_results_color.append('%s%.1g%s' % (colors.get_color_for_result(r), r, colors.CLEAR))
                    else:
                        game_results_color.append('%.1g' % r)

            s = '{0:^8s}'.format(' '.join(game_results))

            if colors.is_enabled():
                n1 = len(s) - len(s.lstrip())
                if (n1 == len(s)): n2 = 0
                else: n2 = len(s) - len(s.rstrip())
                print('%s%s%s' % (n1 * ' ', ' '.join(game_results_color), n2 * ' '), end='')
            else:
                print(s, end='')

        print('| %6s |%10s' % (p.score, p.tie))
        i += 1

import cmd

class CcsInteractive(cmd.Cmd):
    '''Command line processor for interacting with championship state'''

    prompt = "ccs> "
    undoc_header = ''
    actions = [ 'wins-against', 'loses-against' ]

    def __init__(self, players):
        cmd.Cmd.__init__(self)
        self.players = players
        self.results = []
        self.colors = Colors()

        self.update_players()

    def do_state(self, line):
        '''Print current state of the championship'''

        global nplayers

        print("Number of players: %d\n" % nplayers)
        pretty_print_games(self.players, self.colors)

    def parse_line(self, line):
        # Parses name1xname2=result
        m = re.match('(?P<x>[1-9]+)x(?P<y>[1-9]+)=(?P<r>[\d.]+)', line)
        return int(m.group('x')), int(m.group('y')), float(m.group('r'))

    def parse_line_human_format(self, line):
        xname, result, yname = line.split()
        x = self.players.index(self.find_player(xname)) + 1
        y = self.players.index(self.find_player(yname)) + 1
        r = self.actions.index(result) + 1
        if not x or not y or not r:
            raise AttributeError()

        return x, y, r % 2

    def pretty_print_simulation(self, sim):
        x, y, r = sim
        if r == 0:
            rstr = " loses against "
        elif r == 1:
            rstr = " beats "
        else:
            rstr = " draws with "

        print('%s%s%s' % (x.name, rstr, y.name))

    def update_players(self):
        update_players(self.players)

    def find_player(self, name):
        for p in self.players:
            if p.name == name:
                return p

    def do_add(self, line):
        '''Add a new simulation

          You can use either of the formats below:
          - add 1x4=1
            The player in position 1 against the player
            in position 4
          - add player1 [wins-against|loses-against] player2
            The player named player1 wins or loses against player2
        '''
        global nplayers

        try:
            i, j, r = self.parse_line_human_format(line)
        except AttributeError:
            try:
                i, j, r = self.parse_line(line)
            except AttributeError:
                print('Could not parse result simulation %s\n' % line)
                return

        if i > nplayers or j > nplayers or i == j:
            print('Invalid players in result simulation %s\n' % line)
            return

        # 0-based index
        x = self.players[i - 1]
        y = self.players[j - 1]

        if len(x.games[y]) >= 2:
            print('All games already played in %s x %s' % (x.name, y.name))
            return

        x.games[y] = x.games.get(y, Games())
        x.games[y].append(r, True)
        y.games[x] = y.games.get(x, Games())
        y.games[x].append(1 - r, True)
        self.update_players()
        self.results.append((x, y, r))

        print('Simulation added: ', end='')
        self.pretty_print_simulation(self.results[-1])
        self.do_state('')

    def do_simulations(self, line):
        '''Print current simulations'''

        for r in self.results:
            self.pretty_print_simulation(r)

    def do_colors(self, line):
        '''Enable or disable colors'''
        line = line.strip().lower()
        if line == 'on' or line == 'true':
            self.colors.enable()
        elif line == 'off' or line == 'false':
            self.colors.disable()
        else:
            print('Ahn?!?')

    def do_pop(self, line):
        '''Remove last simulation'''
        if not self.results:
            print('No simulation to pop')
            return

        s = self.results.pop()

        x, y, r = s

        x.games[y].pop()
        y.games[x].pop()
        self.update_players()

        print('Simulation removed: ', end='')
        self.pretty_print_simulation(s)
        self.do_state('')

    def do_EOF(self, line):
        '''Type ^D to exit'''
        return True

    def add_complete_name(self, text, players):
        if text:
            complete = [ p.name for p in players if p.name.startswith(text) ]
        else:
            complete = [ p.name for p in players ]
        return complete

    def add_complete_action(self, text):
        if text:
            return [ a for a in self.actions if a.startswith(text) ]
        else:
            return self.actions

    def complete_add(self, text, line, startidx, endidx):
        args = len(line.split())
        if not text: args += 1
        c = []

        if args == 2:
            c = self.add_complete_name(text, self.players)
        elif args == 3:
            c = self.add_complete_action(text)
        elif args == 4:
            xname = line.split()[1]
            x = self.find_player(xname)
            if not x:
                print('No such player %s' % xname)
                return None

            players = [ p for p in self.players if p.name != xname and len(p.games.get(x, Games())) < 2]
            c = self.add_complete_name(text, players)

        if len(c) == 1:
            return [ c[0] + ' ' ]
        return c

CcsInteractive(players).cmdloop()
